# This is a basic build and test script for working with Unity Projects
name: Unity Project Code Coverage

# Controls when the workflow will run
on:
  push:
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
  
# Common environment variables used for the steps in the jobs.
env:
  UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
  UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
  UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}

jobs:

  # Runs Edit and Play Mode Tests
  testAllModes:
    name: Code Coverage
    runs-on: ubuntu-latest
    steps:
      # Checks out the code of the repo
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          lfs: true
      
      # Caches the Unity Library
      - name: Cache Library
        uses: actions/cache@v2
        with:
          path: Library # if using project path, prefix with ${{ matrix.projectPath }}/
          key: Library-Code-Coverage
          restore-keys: Library-
      
      # Runs the tests for combined code coverage results
      - name: Code Coverage
        uses: game-ci/unity-test-runner@v2
        id: tests
        env:
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
        with:
          testMode: all
          coverageOptions: 'generateAdditionalMetrics;generateHtmlReport;generateBadgeReport;assemblyFilters:+<assets>'
      
      # Gets the coverage results
      - name: Upload coverage results
        uses: actions/upload-artifact@v3
        with:
          name: Coverage results (all)
          path: ${{ steps.tests.outputs.coveragePath }}

      - name: Retrieve Coverage Percentage
        run: |
          summary_data=$(cat ${{ steps.tests.outputs.coveragePath }}/Report/Summary.xml)
          coverage=$(grep -oPm1 "(?<=<Linecoverage>)[^<]+" <<< $summary_data)
          echo "Coverage is: " $coverage"/100"
          if [ $coverage -lt $minimum ]
          then 
          echo "Minimum coverage is NOT met."
          core.setFailed("Minimum coverage is NOT met.")
          fi
          echo "Minimum coverage is met."
