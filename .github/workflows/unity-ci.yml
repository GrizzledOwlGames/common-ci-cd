# This is a basic build and test script for working with Unity Projects
name: Unity Project CI

# Controls when the workflow will run
on:
  # Triggers the workflow whenever a commit is directly pushed to the master branch
  push:
    branches: [ master ]
  # Triggers the workflow on pull request events but only for the master branch
  pull_request:
    branches: [ master ]
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
  
# Common environment variables used for the steps in the jobs.
env:
  UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
  UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
  UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
  MINIMUM_COVERAGE: 80

jobs:

  # Builds for all of the Supported Platforms
  buildForAllSupportedPlatforms:
    name: Build for ${{ matrix.targetPlatform }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        targetPlatform:
          #- StandaloneOSX # Build a macOS standalone (Intel 64-bit).
          - StandaloneWindows # Build a Windows standalone.
          - StandaloneWindows64 # Build a Windows 64-bit standalone.
          #- StandaloneLinux64 # Build a Linux 64-bit standalone.
          #- iOS # Build an iOS player.
          #- Android # Build an Android .apk standalone app.
          #- WebGL # WebGL.
    steps:
      # Checks out the code of the repo
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          lfs: true

      # Caches the Unity Library
      - name: Cache Library
        uses: actions/cache@v2
        with:
          path: Library
          key: Library-${{ matrix.targetPlatform }}
          restore-keys: Library-

      # Builds a version for the target platform
      - name: Build
        uses: game-ci/unity-builder@v2
        with:
          targetPlatform: ${{ matrix.targetPlatform }}

      # Uploads the build as an artifact
      - name: Upload Build
        uses: actions/upload-artifact@v2
        with:
          name: Build-${{ matrix.targetPlatform }}
          path: build/${{ matrix.targetPlatform }}

  # Runs Edit and Play Mode Tests
  testAllModes:
    name: Test All Modes
    runs-on: ubuntu-latest
    
    steps:
      # Checks out the code of the repo
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          lfs: true
      
      # Caches the Unity Library
      - name: Cache Library
        uses: actions/cache@v2
        with:
          path: Library
          key: Library-
          restore-keys: Library-
      
      # Runs the tests for the specific play mode
      - name: Test All
        uses: game-ci/unity-test-runner@v2
        id: tests
        env:
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
        with:
          testMode: all
          githubToken: ${{ secrets.GITHUB_TOKEN }}
          checkName: All Test Results
          coverageOptions: 'generateAdditionalMetrics;generateHtmlReport;generateBadgeReport;assemblyFilters:+<assets>'
      
      # Uploads the test results as an artifact
      - name: Upload Test Results
        uses: actions/upload-artifact@v2
        if: always()
        with:
          name: Test results for all
          path: ${{ steps.tests.outputs.artifactsPath }}

      # Gets the coverage results
      - name: Upload coverage results
        uses: actions/upload-artifact@v3
        with:
          name: Coverage results for all
          path: ${{ steps.tests.outputs.coveragePath }}

      #Verifies that the minimum coverage is met
      - name: Verify Minimum Coverage Percentage
        run: |
          summary_data=$(cat ${{ steps.tests.outputs.coveragePath }}/Report/Summary.xml)
          coverage=$(grep -oPm1 "(?<=<Linecoverage>)[^<]+" <<< $summary_data)
          echo "Coverage is: " $coverage"/100"
          if [ $coverage -lt $MINIMUM_COVERAGE ]
          then 
          echo "Minimum coverage is NOT met."
          exit 1
          fi
          echo "Minimum coverage is met."
